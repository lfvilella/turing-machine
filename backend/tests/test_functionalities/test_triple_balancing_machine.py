from app.turing.machines import triple_balancing_machine


class TestTripleBalancingMachine:
    def _build_machine(
        self,
        initial_state='q0',
        final_state='qf',
        tape_data=None,
        blank_symbol='#',
    ):
        return triple_balancing_machine.TripleBalancingMachine(
            initial_state=initial_state,
            final_state=final_state,
            blank_symbol=blank_symbol,
            tape_data=tape_data,
        )

    def test_accept_aaabbbccc(self):
        tape_data = 'a|a|a|b|b|b|c|c|c'

        machine = self._build_machine(tape_data=tape_data)
        result = machine.run()
        expected_result = {
            'tape': 'A|A|A|B|B|B|C|C|C|#',
            'message': 'Work done!',
            'output': 'Accepted',
            'transitions': [
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q5': 'B,B,R'},
                {'q5->q5': 'B,B,R'},
                {'q5->q5': 'B,B,R'},
                {'q5->q6': 'C,C,R'},
                {'q6->q6': 'C,C,R'},
                {'q6->q6': 'C,C,R'},
                {'q6->qf': '#,#,R'},
            ],
        }
        assert expected_result == result

    def test_accept_aaaaaabbbbbbcccccc(self):
        tape_data = 'a|a|a|a|a|a|b|b|b|b|b|b|c|c|c|c|c|c'

        machine = self._build_machine(tape_data=tape_data)
        result = machine.run()
        expected_result = {
            'tape': 'A|A|A|A|A|A|B|B|B|B|B|B|C|C|C|C|C|C|#',
            'message': 'Work done!',
            'output': 'Accepted',
            'transitions': [
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q5': 'B,B,R'},
                {'q5->q5': 'B,B,R'},
                {'q5->q5': 'B,B,R'},
                {'q5->q5': 'B,B,R'},
                {'q5->q5': 'B,B,R'},
                {'q5->q5': 'B,B,R'},
                {'q5->q6': 'C,C,R'},
                {'q6->q6': 'C,C,R'},
                {'q6->q6': 'C,C,R'},
                {'q6->q6': 'C,C,R'},
                {'q6->q6': 'C,C,R'},
                {'q6->q6': 'C,C,R'},
                {'q6->qf': '#,#,R'},
            ],
        }
        assert expected_result == result

    def test_reject_aabbccc(self):
        tape_data = 'a|a|b|b|c|c|c'

        machine = self._build_machine(tape_data=tape_data)
        result = machine.run()
        expected_result = {
            'tape': 'A|A|B|B|C|C|c|#',
            'message': 'Ops... Is not a triple balancing.',
            'output': 'Rejected',
            'transitions': [
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'a,a,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'B,B,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'C,C,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'C,C,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q4': 'B,B,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q5': 'B,B,R'},
                {'q5->q5': 'B,B,R'},
                {'q5->q6': 'C,C,R'},
                {'q6->q6': 'C,C,R'},
                {'fail': '*,*,*'},
            ],
        }
        assert expected_result == result

    def test_reject_abbbccc(self):
        tape_data = 'a|b|b|b|c|c|c'

        machine = self._build_machine(tape_data=tape_data)
        result = machine.run()
        expected_result = {
            'tape': 'A|B|b|b|C|c|c|#',
            'message': 'Ops... Is not a triple balancing.',
            'output': 'Rejected',
            'transitions': [
                {'q0->q1': 'a,A,R'},
                {'q1->q2': 'b,B,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q2': 'b,b,R'},
                {'q2->q3': 'c,C,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q3': 'b,b,L'},
                {'q3->q4': 'B,B,L'},
                {'q4->q0': 'A,A,R'},
                {'q0->q5': 'B,B,R'},
                {'fail': '*,*,*'},
            ],
        }
        assert expected_result == result

    def test_reject_aacc(self):
        tape_data = 'a|a|c|c'

        machine = self._build_machine(tape_data=tape_data)
        result = machine.run()
        expected_result = {
            'tape': 'A|a|c|c|#',
            'message': 'Ops... Is not a triple balancing.',
            'output': 'Rejected',
            'transitions': [
                {'q0->q1': 'a,A,R'},
                {'q1->q1': 'a,a,R'},
                {'fail': '*,*,*'},
            ],
        }
        assert expected_result == result
